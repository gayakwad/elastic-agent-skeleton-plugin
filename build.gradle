/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

group = 'com.gayakwad'
version = '0.1-SNAPSHOT'

// these values that go into plugin.xml
// TODO: change these
project.ext.pluginDesc = [
    id         : 'com.gayakwad.gocd.elasticagent.mesos',
    version    : project.version,
    goCdVersion: '16.12.0',
    name       : 'Mesos Elastic Agent Plugin',
    description: 'GoCD plugin for Mesos',
    vendorName : 'Abhishek Gayakwad',
    vendorUrl  : 'https://github.com/gayakwad'
]

// Force 1.7 compatibility to ensure that it works with older JVMs
sourceCompatibility = 1.7
targetCompatibility = 1.7

// In this section you declare where to find the dependencies of your project
repositories {
  jcenter()
  mavenLocal()
}

sourceSets {
  test {
    java {
      compileClasspath += configurations.compileOnly
      runtimeClasspath += configurations.compileOnly
    }
  }
}

dependencies {
  compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '16.11.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
  compile group: 'com.google.guava', name: 'guava', version: '19.0'
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
  compile group: 'joda-time', name: 'joda-time', version: '2.9.4'

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.0.96-beta'
  testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.3.0'
}

processResources {
  from("src/main/resource-templates") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }

    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }
}

test {
  testLogging {
    showStandardStreams = true

    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.parent) {
        logger.quiet("Running ${suite.name}")
      }
    }

    afterSuite { suite, result ->
      if (suite.parent) {
        logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        if (result.resultType == TestResult.ResultType.FAILURE) {
          logger.quiet("Test ${suite.name} FAILED")
        }
      } else {
        logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
      }
    }
  }
}

jar {
  from(configurations.compile) {
    into "lib/"
  }
  from(sourceSets.main.java) {
    into "/"
  }
}


task diff {
  doFirst {
    Set<File> files = project.fileTree("src").exclude(
      '**/MesosAgentInstances.java',
      '**/MesosInstance.java'
    ).files

    Set<File> dockerFiles = project.fileTree("../docker-elastic-agents/src").exclude(
      '**/MesosAgentInstances.java',
      '**/MesosInstance.java'
    ).files

    files.each { File file ->
      File dockerFile = dockerFiles.find { eachFile -> eachFile.name == file.name }
      if (dockerFile == null) {
        return;
      }
      println "Diffing ${file} with ${dockerFile}"
      exec {
        commandLine = ['colordiff', file, dockerFile, "--ignore-matching-lines=import", "--ignore-matching-lines=package"]
        setIgnoreExitValue(true)
        standardOutput = System.out
        errorOutput = System.err
      }
    }

  }

}
